getwd()
list.files("diet_data")
andy <- read.csv("diet_data/Andy.csv")
View(andy)
head(andy)
length(andy$Day)
dim(andy)
str(andy)
summary(andy)
names(andy)
andy[1, "Weight"]
andy[30, "Weight"]
andy[which(andy$Day == 30), "Weight"]
andy[which(andy[,"Day"]==30), "Weight"]
subset(andy$Weight, andy$Day==30)
andy_start <- andy[1,"Weight"]
andy_end <- andy[30, "Weight"]
andy_loss <- andy_start - andy_end
andy_loss
?list.files
list.files(R.home())
file.info("diet_data")
list.files()
file.info("Chambers_-_Software_for_Data_Analysis_-_Programming_with_R.pdf")
files()
file
files
file.create("Hello")
ls()
list.files()
file.exists("Hello")
file.exists("Um")
file.remove("Hello")
list.files
list.files()
file.create("Um-hello")
file.rename("Um-hello", "Hello!")
list.files()
file.create("World")
file.append("Hello!", "World")
list.files()
?list.files
dir()
dir(all.files=TRUE)
dir(full.names=TRUE)
list.dirs(full.names=TRUE)
files <- list.files("Diet_Data")
files
files[1]
files[3:5]
files[2]
head(read.csv[3])
head(read.csv(files[3])
head(read.csv(files[3]))
files[3]
files_full <- list.files("diet_data", full.names=TRUE)
files_full
head(read.csv(files_full[3]))
andy_david <- rbind(andy, read.csv(files_full[2]))
andy_david
head(andy_david)
tail(andy_david)
day_25 <- andy_david[which(andy_david$Day == 25)]
day_25 <- andy_david[which(andy_david$Day == 25), ]
day_25
for (i in 1:5) print i
for (i in 1:5) {print i}
for (i in 1:5) print(i)
for (i in 1:5) { dat <- rbind(dat, read.csv(files_full[i]))}
dat <- data.frame()
dat
class(dat)
attributes(dat)
dim(dat)
for (i in 1:5) { dat <- rbind(dat, read.csv(files_full[i]))}
str(dat)
?str
list.files("diet_data/")
median(dat)
median(dat$Weight)
dat
median(dat$Weight, na.rm=TRUE)
dat_30 <- dat[which(dat[, "Day"] == 30),]
dat_30
dat[which(dat[,"Day"]==25), which(dat["Patient.Name",] == "John")]
dat[, which(dat["Patient.Name",] == "John")]
dat[, "John"]
dat[, names("John")]
dat[, dat$Patient.Name == "John"]
dat[which(dat["Patient.Name",]=="John")]
dat[which(dat[,"Patient.Name"]=="John")]
dat[which(dat[,"Patient.Name"]=="John"),]
dat[col="Age"]
dat[,"Age"]
x <- dat[,"Age"]
class(x)
class(dat)
median(dat_30$Weight)
weightmedian <- function(directory, day) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_list[i]))
}
data_subset <- dat[which(dat[,"Day"] == day),]
median(dat_subset[,"Weight"], na.rm=TRUE)
}
weightmedian("diet_data", 25)
weightmedian <- function(directory, day) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in 1:5) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[,"Day"] == day),]
median(dat_subset[,"Weight"], na.rm=TRUE)
}
weightmedian("diet_data", 25)
weightmedian("diet_data", 3)
weightmedian("diet_data", 30)
weightmedian(directory="diet_data", 30)
weightmedian(directory="diet_data", day =30)
?data.frame
getwd()
list.files("specdata")
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in seq_along(files_list)) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "ID"] == id),]
median(dat_subset[,pollutant], na.rm=TRUE)
}
pollutantmean("specdata", pollutant = "nitrate", id = 1:322)
pollutantmean(directory= "specdata", pollutant = "nitrate", id = 1:322)
pollutantmean <- function(directory, pollutant, id = 1:332) {
files_list <- list.files(directory, full.names = TRUE)
dat <- data.frame()
for (i in seq_along(files_list)) {
dat <- rbind(dat, read.csv(files_list[i]))
}
dat_subset <- dat[which(dat[, "ID"] == id),]
mean(dat_subset[,pollutant], na.rm=TRUE)
}
pollutantmean(directory= "specdata", pollutant = "nitrate", id = 1:322)
pollutantmean(directory= "specdata", pollutant = "nitrate", id = 23)
pollutantmean(directory= "specdata", pollutant = "sulfate", id = 1:10)
pollutantmean(directory= "specdata", pollutant = "nitrate", id = 70:72)
}
complete <- function(directory, id = 1:332) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'id' is an integer vector indicating the
# monitor ID numbers to be used Return a data frame of the form: id nobs 1
# 117 2 1041 ...  where 'id' is the monitor ID number and 'nobs' is the
# number of complete cases
# --- Assert create an empty vector
nobsNum <- numeric(0)
for (cid in id) {
# --- Assert get data frame as ID
cDfr <- getmonitor(cid, directory)
# --- Assert count the number of complete cases and append to numeric
# vector
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
# --- Assert return value is a data frame with TWO (2) columns
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
# --- Assert 'id' is a vector of length 1 indicating the monitor ID
# number. The user can specify 'id' as either an integer, a character, or
# a numeric.  'directory' is a character vector of length 1 indicating the
# location of the CSV files 'summarize' is a logical indicating whether a
# summary of the data should be printed to the console; the default is
# FALSE
# --- Assert construct file name Directory is pre-appended to file name.
# Use sprintf() to add leading zeroes.  E.g. 'specdata/001.csv'
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
# --- Assert read csv
rawDfr <- read.csv(fileStr)
# --- Assert summary if true
if (summarize) {
print(summary(rawDfr))
}
# --- Return value is a data frame
return(rawDfr)
complete("specdata", 1)
complete <- function(directory, id = 1:332) {
# --- Assert 'directory' is a character vector of length 1 indicating the
# location of the CSV files.  'id' is an integer vector indicating the
# monitor ID numbers to be used Return a data frame of the form: id nobs 1
# 117 2 1041 ...  where 'id' is the monitor ID number and 'nobs' is the
# number of complete cases
# --- Assert create an empty vector
nobsNum <- numeric(0)
for (cid in id) {
# --- Assert get data frame as ID
cDfr <- getmonitor(cid, directory)
# --- Assert count the number of complete cases and append to numeric
# vector
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
# --- Assert return value is a data frame with TWO (2) columns
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
# --- Assert 'id' is a vector of length 1 indicating the monitor ID
# number. The user can specify 'id' as either an integer, a character, or
# a numeric.  'directory' is a character vector of length 1 indicating the
# location of the CSV files 'summarize' is a logical indicating whether a
# summary of the data should be printed to the console; the default is
# FALSE
# --- Assert construct file name Directory is pre-appended to file name.
# Use sprintf() to add leading zeroes.  E.g. 'specdata/001.csv'
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
# --- Assert read csv
rawDfr <- read.csv(fileStr)
# --- Assert summary if true
if (summarize) {
print(summary(rawDfr))
}
# --- Return value is a data frame
return(rawDfr)
}
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
nobsNum <- numeric(0)
for (cid in id) {
cDfr <- getmonitor(cid, directory)
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
rawDfr <- read.csv(fileStr)
if (summarize) {
print(summary(rawDfr))
}
return(rawDfr)
}
complete("specdata", 30:25)
complete <- function(directory, id = 1:332) {
nobsNum <- numeric(0)
for (cid in id) {
cDfr <- getmonitor(cid, directory)
nobsNum <- c(nobsNum, nrow(na.omit(cDfr)))
}
data.frame(id = id, nobs = nobsNum)
}
getmonitor <- function(id, directory, summarize = FALSE) {
fileStr <- paste(directory, "/", sprintf("%03d", as.numeric(id)), ".csv",
sep = "")
rawDfr <- read.csv(fileStr)
print(rawDfr)
if (summarize) {
print(summary(rawDfr))
}
return(rawDfr)
}
complete("specdata", 30:25)
getwd()
help.start()
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
ls()
rm(x,y)
ls()
x <- 1:20
s
x
class(x)
w <- 1 + sqrt(x)/2
w
class(w)
dummy <- data.frame(x=x, y=x + rnorm(x)*w)
dummy
fm <- lm(y ~ x, data=dummy)
summary(fm)
fm1 <- lm(y ~ x, data=dummy, weight=1/w^2)
summary(fm1)
attach(dummy)
lrf <- lowess(x,y)
plot(x,y)
help(if)
help('if')
??solve
example(lapply)
objects()
q()
x <- 5
print(x)
parent <- function(){
child <- function () {
print(x)
x <<- x + 5
print(x)
}
child()
print(x)
}
parent()
}
grandparent <- function() {
x <- 5
print(x)
parent <- function(){
child <- function () {
print(x)
x <<- x + 5
print(x)
}
child()
print(x)
}
parent()
}
grandparent()
browser(grandparent)
debug(grandparent)
grandparent()
grandparent()
setwd("~/DataScienceJHU//Reproducible-Research")
getwd()
dir()
ls("RepData_PeerAssessment1/")
setwd("./RepData_PeerAssessment1/")
ls()
dir()
read.csv("activity.zip")
read.csv("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip")
read.csv("activity.csv")
str("activity.csv")
reading <- read.csv("activity.csv")
reading
str(reading)
dim(reading)
?hist
hist(reading)
hist(reading$1)
hist(reading[,1]
hist(reading[,1])
step_median
